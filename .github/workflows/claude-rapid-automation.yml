name: Claude Rapid Automation

on:
  schedule:
    # Rapid mode: Every 5 minutes for fast processing
    - cron: '*/5 * * * *'
  workflow_dispatch:
  push:
    branches:
      - 'claude/**'
      - 'feature/issue-*'

jobs:
  rapid-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
    
    - name: Rapid Automation Processing
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('üöÄ RAPID AUTOMATION START');
          const now = new Date();
          console.log(`Execution time: ${now.toISOString()}`);
          
          try {
            // Quick issue scanning
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 50,
              sort: 'updated',
              direction: 'desc'
            });
            
            console.log(`Found ${issues.data.length} open issues`);
            
            // Multiple label patterns for broader detection
            const targetLabels = ['claude-processed', 'claude-ready', 'automation-ready', 'rapid-process'];
            const processedIssues = issues.data.filter(issue => 
              issue.labels.some(label => targetLabels.includes(label.name))
            );
            
            console.log(`Found ${processedIssues.length} rapid-automation ready issues`);
            
            if (processedIssues.length === 0) {
              console.log('No rapid-automation ready issues found, ending');
              return;
            }
            
            for (const issue of processedIssues) {
              console.log(`\\n‚ö° Rapid Processing Issue #${issue.number}: ${issue.title}`);
              
              try {
                // Fast branch detection
                const branches = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100
                });
                
                // Comprehensive branch patterns
                const branchPatterns = [
                  `issue-${issue.number}`,
                  `claude-${issue.number}`,
                  `feature/issue-${issue.number}`,
                  `fix/issue-${issue.number}`,
                  `rapid-${issue.number}`
                ];
                
                const rapidBranches = branches.data.filter(branch => 
                  branchPatterns.some(pattern => branch.name.includes(pattern))
                );
                
                if (rapidBranches.length === 0) {
                  console.log(`No rapid branch found for Issue #${issue.number}`);
                  continue;
                }
                
                const rapidBranch = rapidBranches[0];
                console.log(`Found branch: ${rapidBranch.name}`);
                
                // Quick PR check
                const existingPRs = await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  head: `${context.repo.owner}:${rapidBranch.name}`,
                  state: 'all'
                });
                
                let prNumber = null;
                
                if (existingPRs.data.length > 0) {
                  const pr = existingPRs.data[0];
                  console.log(`Found existing PR #${pr.number}, state: ${pr.state}`);
                  
                  if (pr.state === 'open') {
                    prNumber = pr.number;
                  } else {
                    console.log(`PR #${pr.number} is already ${pr.state}`);
                    continue;
                  }
                } else {
                  // Rapid PR creation
                  console.log(`‚ö° Creating Rapid PR for Issue #${issue.number}`);
                  
                  try {
                    const pr = await github.rest.pulls.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: `‚ö° Rapid Fix: ${issue.title} (closes #${issue.number})`,
                      head: rapidBranch.name,
                      base: 'main',
                      body: `## ‚ö° Claude Rapid Automation

### Èñ¢ÈÄ£Issue
Closes #${issue.number}

### üöÄ Rapid Automation Flow
- [x] ‚úÖ Claude CodeÂÆüË£ÖÊ§úÁü•
- [x] ‚ö° È´òÈÄüPR‰ΩúÊàêÔºà5ÂàÜÈñìÈöîÔºâ
- [x] üöÄ ËøÖÈÄüËá™Âãï„Éû„Éº„Ç∏
- [x] üîí IssueËá™Âãï„ÇØ„É≠„Éº„Ç∫
- [x] üßπ „Éñ„É©„É≥„ÉÅËá™ÂãïÂâäÈô§

### ÂÆüË°åÊôÇÂàª
${now.toISOString()}

### ‚ö° Rapid Schedule
- ÂÆüË°åÈñìÈöî: 5ÂàÜ„Åî„Å®
- Ê§úÁü•ÈÄüÂ∫¶: È´òÈÄü„Çπ„Ç≠„É£„É≥
- Âá¶ÁêÜÈÄüÂ∫¶: ÊúÄÈÅ©ÂåñÊ∏à„Åø

---
‚ö° **Rapid Automation** | [Claude Automation](https://github.com/takezou621/claude-automation)`
                    });
                    
                    prNumber = pr.data.number;
                    console.log(`‚úÖ Created Rapid PR #${prNumber}`);
                    
                  } catch (prError) {
                    console.log(`‚ùå Rapid PR creation failed: ${prError.message}`);
                    continue;
                  }
                }
                
                // Rapid auto-merge
                if (prNumber) {
                  console.log(`‚ö° Rapid auto-merging PR #${prNumber}`);
                  
                  // Minimal delay for rapid processing
                  await new Promise(resolve => setTimeout(resolve, 2000));
                  
                  try {
                    await github.rest.pulls.merge({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: prNumber,
                      commit_title: `‚ö° Rapid Auto-merge: Issue #${issue.number}`,
                      merge_method: 'squash'
                    });
                    console.log(`‚úÖ Rapid merged PR #${prNumber}`);
                  } catch (mergeError) {
                    console.log(`‚ö†Ô∏è Rapid merge failed: ${mergeError.message}`);
                    continue;
                  }
                }
                
                // Rapid issue completion
                console.log(`üîí Rapid closing Issue #${issue.number}`);
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `‚ö° **Claude Rapid Automation ÂÆå‰∫Ü**

Issue #${issue.number} „ÅÆÈ´òÈÄüËá™ÂãïÂåñÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ

**ÂÆüË°åÂÜÖÂÆπ:**
- ü§ñ Claude CodeÂÆüË£ÖÊ§úÁü•
- ‚ö° È´òÈÄüPR‰ΩúÊàê„Éª„Éû„Éº„Ç∏Ôºà5ÂàÜÈñìÈöîÔºâ
- üîí IssueËá™Âãï„ÇØ„É≠„Éº„Ç∫
- üßπ „Éñ„É©„É≥„ÉÅËá™ÂãïÂâäÈô§

**ÂÆüË°åÊôÇÂàª:** ${now.toISOString()}

**‚ö° Rapid AutomationÁâπÂæ¥:**
- üöÄ 5ÂàÜÈñìÈöî„ÅÆÈ´òÈÄüÂÆüË°å
- ‚ö° ÊúÄÈÅ©Âåñ„Åï„Çå„ÅüÂá¶ÁêÜÈÄüÂ∫¶
- üéØ ÂäπÁéáÁöÑ„Å™„É™„ÇΩ„Éº„Çπ‰ΩøÁî®

---
‚ö° **Powered by [Claude Rapid Automation](https://github.com/takezou621/claude-automation)**`
                });
                
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['claude-completed', 'rapid-automation']
                });
                
                // Rapid branch cleanup
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${rapidBranch.name}`
                  });
                  console.log(`üóëÔ∏è Rapid deleted branch ${rapidBranch.name}`);
                } catch (deleteError) {
                  console.log(`‚ö†Ô∏è Rapid branch deletion failed: ${deleteError.message}`);
                }
                
                console.log(`‚ö° Issue #${issue.number} RAPID AUTOMATION COMPLETED!`);
                
              } catch (issueError) {
                console.log(`‚ùå Issue #${issue.number} rapid processing failed: ${issueError.message}`);
                continue;
              }
            }
            
            console.log('\\n‚ö° RAPID AUTOMATION FINISHED');
            
          } catch (error) {
            console.log(`‚ùå Rapid automation error: ${error.message}`);
            console.log(error.stack);
            throw error;
          }