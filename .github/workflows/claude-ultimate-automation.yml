name: Claude Ultimate Automation

on:
  schedule:
    - cron: '0 * * * *'  # Every hour for testing
  workflow_dispatch:
  push:
    branches:
      - 'claude/**'
      - 'feature/issue-*'

jobs:
  ultimate-automation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      actions: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: main
    
    - name: Ultimate Automation Engine
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          console.log('ðŸš€ ULTIMATE AUTOMATION START');
          
          try {
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 50
            });
            
            console.log(`Found ${issues.data.length} open issues`);
            
            const targetLabels = ['claude-processed', 'claude-ready', 'automation-ready'];
            const processedIssues = issues.data.filter(issue => 
              issue.labels.some(label => targetLabels.includes(label.name))
            );
            
            console.log(`Found ${processedIssues.length} automation-ready issues`);
            
            if (processedIssues.length === 0) {
              console.log('No automation-ready issues found');
              return;
            }
            
            for (const issue of processedIssues) {
              console.log(`Processing Issue #${issue.number}: ${issue.title}`);
              
              const branches = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              const branchPatterns = [
                `issue-${issue.number}`,
                `claude-${issue.number}`,
                `feature/issue-${issue.number}`,
                `claude/issue-${issue.number}`
              ];
              
              const matchingBranches = branches.data.filter(branch => 
                branchPatterns.some(pattern => branch.name.includes(pattern))
              );
              
              if (matchingBranches.length === 0) {
                console.log(`No branch found for Issue #${issue.number}`);
                continue;
              }
              
              const targetBranch = matchingBranches[0];
              console.log(`Found branch: ${targetBranch.name}`);
              
              const existingPRs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${targetBranch.name}`,
                state: 'all'
              });
              
              let prNumber = null;
              
              if (existingPRs.data.length > 0) {
                const pr = existingPRs.data[0];
                console.log(`Found existing PR #${pr.number}, state: ${pr.state}`);
                
                if (pr.state === 'open') {
                  prNumber = pr.number;
                } else {
                  continue;
                }
              } else {
                console.log(`Creating PR for Issue #${issue.number}`);
                
                try {
                  const pr = await github.rest.pulls.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `ðŸ”¥ Ultimate Fix: ${issue.title} (resolves #${issue.number})`,
                    head: targetBranch.name,
                    base: 'main',
                    body: `## ðŸš€ Claude Ultimate Automation

Resolves #${issue.number}

### âš¡ Ultimate Automation Flow
- [x] ðŸ¤– Claude Code implementation detected
- [x] ðŸ”¥ Ultimate PR creation
- [x] âš¡ Lightning merge execution
- [x] ðŸŽ¯ Smart closure
- [x] ðŸ§¹ Perfect cleanup

---
ðŸ”¥ **Powered by Claude Ultimate Automation**`
                  });
                  
                  prNumber = pr.data.number;
                  console.log(`Created PR #${prNumber}`);
                  
                } catch (prError) {
                  console.log(`PR creation failed: ${prError.message}`);
                  continue;
                }
              }
              
              if (prNumber) {
                console.log(`Auto-merging PR #${prNumber}`);
                
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                try {
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    commit_title: `ðŸ”¥ Ultimate Auto-merge: Issue #${issue.number}`,
                    merge_method: 'squash'
                  });
                  console.log(`Merged PR #${prNumber}`);
                } catch (mergeError) {
                  console.log(`Merge failed: ${mergeError.message}`);
                  continue;
                }
              }
              
              console.log(`Closing Issue #${issue.number}`);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸ”¥ **ULTIMATE AUTOMATION COMPLETED**

Issue #${issue.number} has been **INSTANTLY RESOLVED** by Claude Ultimate Automation!

## ðŸš€ Execution Summary:
- ðŸ¤– AI Detection: Claude Code implementation auto-detected
- âš¡ Lightning Processing: End-to-end resolution
- ðŸ”¥ Ultimate PR: Auto-created and instantly merged
- ðŸŽ¯ Smart Closure: Issue automatically resolved
- ðŸ§¹ Perfect Cleanup: Branch automatically deleted

---
ðŸ”¥ **Claude Ultimate Automation Engine**
âš¡ **Zero Latency â€¢ Maximum Efficiency â€¢ Perfect Execution**`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['claude-completed', 'ultimate-automation']
              });
              
              await new Promise(resolve => setTimeout(resolve, 1000));
              
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${targetBranch.name}`
                });
                console.log(`Deleted branch ${targetBranch.name}`);
              } catch (deleteError) {
                console.log(`Branch deletion warning: ${deleteError.message}`);
              }
              
              console.log(`Issue #${issue.number} ULTIMATE AUTOMATION SUCCESS!`);
            }
            
            console.log('ULTIMATE AUTOMATION COMPLETE');
            
          } catch (error) {
            console.log(`Ultimate automation error: ${error.message}`);
            throw error;
          }